<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>矩木</title>
  
  <subtitle>Matrix Wood</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://canftin.com/"/>
  <updated>2019-04-11T07:12:43.585Z</updated>
  <id>http://canftin.com/</id>
  
  <author>
    <name>CanftIn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>elisp知识整理</title>
    <link href="http://canftin.com/2019/elisp%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://canftin.com/2019/elisp知识整理/</id>
    <published>2019-04-10T16:00:00.000Z</published>
    <updated>2019-04-11T07:12:43.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表处理"><a href="#列表处理" class="headerlink" title="列表处理"></a>列表处理</h2><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> function-name (<span class="name">arguments-list</span>)</span><br><span class="line">  <span class="string">"document string"</span></span><br><span class="line">  body)</span><br></pre></td></tr></table></figure><h2 id="局部作用域变量"><a href="#局部作用域变量" class="headerlink" title="局部作用域变量"></a>局部作用域变量</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">let</span> (<span class="name">bindings</span>)</span><br><span class="line">  body)</span><br></pre></td></tr></table></figure><p>let<em> 和 let 的使用形式完全相同，唯一的区别是在 let</em> 声明中就能使用前面声明的变量，比如：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> circle-area (<span class="name">radix</span>)</span><br><span class="line">  (<span class="name">let*</span> ((<span class="name">pi</span> <span class="number">3.1415926</span>)</span><br><span class="line">         (<span class="name">area</span> (<span class="name">*</span> pi radix radix)))</span><br><span class="line">    (<span class="name">message</span> <span class="string">"直径为 %.2f 的圆面积是 %.2f"</span> radix area)))</span><br></pre></td></tr></table></figure></p><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">lambda</span> (<span class="name">arguments-list</span>)</span><br><span class="line">  <span class="string">"documentation string"</span></span><br><span class="line">  body)</span><br></pre></td></tr></table></figure><p>调用 lambda 方法如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">funcall</span> (<span class="name">lambda</span> (<span class="name">name</span>)</span><br><span class="line">           (<span class="name">message</span> <span class="string">"Hello, %s!"</span> name)) <span class="string">"Emacser"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="一些和buffer相关的函数"><a href="#一些和buffer相关的函数" class="headerlink" title="一些和buffer相关的函数"></a>一些和buffer相关的函数</h2><p>可以通过输入<strong>C-h f</strong>然后输入函数名查看函数文档。<br><strong>describe-function</strong>可以告诉你函数定义的位置。<br>如果想在源文件里查看函数，可以使用<strong>xref-find-definitions</strong>来进行跳转。<br><strong>beginning-of-buffer</strong>和<strong>M-&lt;</strong>绑定。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> simplified-beginning-of-buffer ()</span><br><span class="line">  <span class="string">"Move point to the beginning of the buffer;</span></span><br><span class="line"><span class="string">  leave mark at previous position."</span></span><br><span class="line">  (<span class="name">interactive</span>)</span><br><span class="line">  (<span class="name">push-mark</span>)</span><br><span class="line">  (<span class="name">goto-char</span> (<span class="name">point-min</span>)))</span><br></pre></td></tr></table></figure></p><p>上面的函数的函数体包括两行：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">push-mark</span>)</span><br><span class="line">(<span class="name">goto-char</span> (<span class="name">point-min</span>))</span><br></pre></td></tr></table></figure></p><p><strong>describe-function</strong><br><strong>describe-variable</strong><br>Print the documentation for a function or variable. Conventionally<br>bound to C-h f and C-h v.<br><strong>xref-find-definitions</strong><br>Find the file containing the source for a function or variable and switch<br>buffers to it, positioning point at the beginning of the item. Conventionally<br>bound to M-. (that’s a period following the META key).<br><strong>save-excursion</strong><br>Save the location of point and restore its value after the arguments<br>to save-excursion have been evaluated. Also, remember the current<br>buffer and return to it.<br><strong>push-mark</strong> Set mark at a location and record the value of the previous mark on<br>the mark ring. The mark is a location in the buffer that will keep its<br>relative position even if text is added to or removed from the buffer.<br><strong>goto-char</strong> Set point to the location specified by the value of the argument, which<br>can be a number, a marker, or an expression that returns the number<br>of a position, such as (point-min).<br><strong>insert-buffer-substring</strong><br>Copy a region of text from a buffer that is passed to the function as<br>an argument and insert the region nto the current buffer.<br><strong>mark-whole-buffer</strong><br>Mark the whole buffer as a region. Normally bound to C-x h.<br><strong>set-buffer</strong><br>Switch the attention of Emacs to another buffer, but do not change<br>the window being displayed. Used when the program rather than a<br>human is to work on a different buffer.<br><strong>get-buffer-create</strong><br><strong>get-buffer</strong><br>Find a named buffer or create one if a buffer of that name does not<br>exist. The get-buffer function returns nil if the named buffer does<br>not exist.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;列表处理&quot;&gt;&lt;a href=&quot;#列表处理&quot; class=&quot;headerlink&quot; title=&quot;列表处理&quot;&gt;&lt;/a&gt;列表处理&lt;/h2&gt;&lt;h2 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="elisp" scheme="http://canftin.com/categories/elisp/"/>
    
    
      <category term="elisp" scheme="http://canftin.com/tags/elisp/"/>
    
  </entry>
  
</feed>
